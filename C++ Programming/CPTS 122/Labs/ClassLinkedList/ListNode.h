#pragma once

#include <iostream>

using std::cin;
using std::cout;
using std::endl;

// This class defines a node, which will always be allocated on the heap
class ListNode
{
public:
	ListNode(int newData = 0); // constructor - "constructs" a ListNode; initializes the object
	ListNode(const ListNode &copy);  // copy constructor - implicitly invoked copying a ListNode object during construction of 
	                           // another ListNode object, or when a ListNode object is passed-by-value;
	                           // the compiler generated one would be ok here as well! shallow copy performed!

	~ListNode();               // destructor - implicitly invoked when a ListNode object leaves scope;
	                           // the compiler generated one would be ok here as well!

							   // we will not define an explicit overloaded assignment operator (=). We will
							   // rely on the memberwise assignment generated by the compiler.

	// getters
	int getData() const;                // used to retrieve a copy of the data in the node
	ListNode * getNextPtr() const;      // used to retrieve a copy of the node's next pointer

	// setters
	void setData(const int newData);            // used to modify the data in the node
	void setNextPtr(ListNode * const pNewNext); // used to modify the node's next pointer

private:
	int mData;                   // represents a score
	ListNode *mpNext;            // should be set to NULL in the constructor
};